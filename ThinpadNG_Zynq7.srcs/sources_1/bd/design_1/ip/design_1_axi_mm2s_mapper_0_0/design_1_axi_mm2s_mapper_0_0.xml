<?xml version="1.0" encoding="UTF-8"?>
<spirit:component xmlns:xilinx="http://www.xilinx.com"
		xmlns:spirit="http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009"
		xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
	<spirit:vendor>xilinx.com</spirit:vendor>
	<spirit:library>customized_ip</spirit:library>
	<spirit:name>design_1_axi_mm2s_mapper_0_0</spirit:name>
	<spirit:version>1.0</spirit:version>
	<spirit:busInterfaces>
		<spirit:busInterface>
			<spirit:name>S_AXI</spirit:name>
			<spirit:displayName>S_AXI</spirit:displayName>
			<spirit:busType spirit:vendor="xilinx.com"
					spirit:library="interface"
					spirit:name="aximm"
					spirit:version="1.0"/>
			<spirit:abstractionType spirit:vendor="xilinx.com"
					spirit:library="interface"
					spirit:name="aximm_rtl"
					spirit:version="1.0"/>
			<spirit:slave/>
			<spirit:portMaps>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>ARADDR</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>s_axi_araddr</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>ARBURST</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>s_axi_arburst</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>ARCACHE</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>s_axi_arcache</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>ARID</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>s_axi_arid</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>ARLEN</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>s_axi_arlen</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>ARLOCK</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>s_axi_arlock</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>ARPROT</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>s_axi_arprot</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>ARQOS</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>s_axi_arqos</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>ARREADY</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>s_axi_arready</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>ARREGION</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>s_axi_arregion</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>ARSIZE</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>s_axi_arsize</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>ARUSER</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>s_axi_aruser</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>ARVALID</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>s_axi_arvalid</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>AWADDR</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>s_axi_awaddr</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>AWBURST</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>s_axi_awburst</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>AWCACHE</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>s_axi_awcache</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>AWID</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>s_axi_awid</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>AWLEN</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>s_axi_awlen</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>AWLOCK</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>s_axi_awlock</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>AWPROT</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>s_axi_awprot</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>AWQOS</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>s_axi_awqos</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>AWREADY</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>s_axi_awready</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>AWREGION</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>s_axi_awregion</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>AWSIZE</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>s_axi_awsize</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>AWUSER</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>s_axi_awuser</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>AWVALID</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>s_axi_awvalid</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>BID</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>s_axi_bid</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>BREADY</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>s_axi_bready</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>BRESP</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>s_axi_bresp</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>BUSER</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>s_axi_buser</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>BVALID</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>s_axi_bvalid</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>RDATA</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>s_axi_rdata</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>RID</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>s_axi_rid</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>RLAST</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>s_axi_rlast</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>RREADY</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>s_axi_rready</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>RRESP</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>s_axi_rresp</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>RUSER</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>s_axi_ruser</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>RVALID</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>s_axi_rvalid</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>WDATA</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>s_axi_wdata</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>WLAST</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>s_axi_wlast</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>WREADY</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>s_axi_wready</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>WSTRB</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>s_axi_wstrb</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>WUSER</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>s_axi_wuser</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>WVALID</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>s_axi_wvalid</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
			</spirit:portMaps>
			<spirit:vendorExtensions>
				<xilinx:busInterfaceInfo>
					<xilinx:enablement>
						<xilinx:isEnabled xilinx:resolve="dependent"
								xilinx:id="BUSIF_ENABLEMENT.S_AXI"
								xilinx:dependency="(spirit:decode(id(&apos;PARAM_VALUE.INTERFACES&apos;)) != &apos;M_AXI&apos;)">true</xilinx:isEnabled>
					</xilinx:enablement>
				</xilinx:busInterfaceInfo>
			</spirit:vendorExtensions>
		</spirit:busInterface>
		<spirit:busInterface>
			<spirit:name>M_AXI</spirit:name>
			<spirit:displayName>M_AXI</spirit:displayName>
			<spirit:busType spirit:vendor="xilinx.com"
					spirit:library="interface"
					spirit:name="aximm"
					spirit:version="1.0"/>
			<spirit:abstractionType spirit:vendor="xilinx.com"
					spirit:library="interface"
					spirit:name="aximm_rtl"
					spirit:version="1.0"/>
			<spirit:master>
				<spirit:addressSpaceRef spirit:addressSpaceRef="Bridge"/>
			</spirit:master>
			<spirit:portMaps>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>ARADDR</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>m_axi_araddr</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>ARBURST</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>m_axi_arburst</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>ARCACHE</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>m_axi_arcache</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>ARID</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>m_axi_arid</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>ARLEN</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>m_axi_arlen</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>ARLOCK</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>m_axi_arlock</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>ARPROT</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>m_axi_arprot</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>ARQOS</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>m_axi_arqos</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>ARREADY</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>m_axi_arready</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>ARREGION</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>m_axi_arregion</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>ARSIZE</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>m_axi_arsize</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>ARUSER</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>m_axi_aruser</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>ARVALID</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>m_axi_arvalid</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>AWADDR</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>m_axi_awaddr</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>AWBURST</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>m_axi_awburst</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>AWCACHE</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>m_axi_awcache</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>AWID</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>m_axi_awid</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>AWLEN</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>m_axi_awlen</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>AWLOCK</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>m_axi_awlock</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>AWPROT</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>m_axi_awprot</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>AWQOS</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>m_axi_awqos</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>AWREADY</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>m_axi_awready</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>AWREGION</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>m_axi_awregion</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>AWSIZE</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>m_axi_awsize</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>AWUSER</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>m_axi_awuser</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>AWVALID</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>m_axi_awvalid</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>BID</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>m_axi_bid</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>BREADY</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>m_axi_bready</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>BRESP</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>m_axi_bresp</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>BUSER</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>m_axi_buser</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>BVALID</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>m_axi_bvalid</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>RDATA</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>m_axi_rdata</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>RID</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>m_axi_rid</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>RLAST</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>m_axi_rlast</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>RREADY</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>m_axi_rready</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>RRESP</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>m_axi_rresp</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>RUSER</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>m_axi_ruser</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>RVALID</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>m_axi_rvalid</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>WDATA</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>m_axi_wdata</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>WLAST</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>m_axi_wlast</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>WREADY</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>m_axi_wready</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>WSTRB</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>m_axi_wstrb</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>WUSER</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>m_axi_wuser</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>WVALID</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>m_axi_wvalid</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
			</spirit:portMaps>
			<spirit:vendorExtensions>
				<xilinx:busInterfaceInfo>
					<xilinx:enablement>
						<xilinx:isEnabled xilinx:resolve="dependent"
								xilinx:id="BUSIF_ENABLEMENT.M_AXI"
								xilinx:dependency="(spirit:decode(id(&apos;PARAM_VALUE.INTERFACES&apos;)) != &apos;S_AXI&apos;)">true</xilinx:isEnabled>
					</xilinx:enablement>
				</xilinx:busInterfaceInfo>
			</spirit:vendorExtensions>
		</spirit:busInterface>
		<spirit:busInterface>
			<spirit:name>M_AXIS</spirit:name>
			<spirit:displayName>M_AXIS</spirit:displayName>
			<spirit:busType spirit:vendor="xilinx.com"
					spirit:library="interface"
					spirit:name="axis"
					spirit:version="1.0"/>
			<spirit:abstractionType spirit:vendor="xilinx.com"
					spirit:library="interface"
					spirit:name="axis_rtl"
					spirit:version="1.0"/>
			<spirit:master/>
			<spirit:portMaps>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>TDATA</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>m_axis_tdata</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>TID</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>m_axis_tid</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>TKEEP</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>m_axis_tkeep</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>TLAST</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>m_axis_tlast</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>TREADY</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>m_axis_tready</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>TVALID</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>m_axis_tvalid</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
			</spirit:portMaps>
		</spirit:busInterface>
		<spirit:busInterface>
			<spirit:name>S_AXIS</spirit:name>
			<spirit:displayName>S_AXIS</spirit:displayName>
			<spirit:busType spirit:vendor="xilinx.com"
					spirit:library="interface"
					spirit:name="axis"
					spirit:version="1.0"/>
			<spirit:abstractionType spirit:vendor="xilinx.com"
					spirit:library="interface"
					spirit:name="axis_rtl"
					spirit:version="1.0"/>
			<spirit:slave/>
			<spirit:portMaps>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>TDATA</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>s_axis_tdata</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>TID</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>s_axis_tid</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>TKEEP</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>s_axis_tkeep</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>TLAST</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>s_axis_tlast</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>TREADY</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>s_axis_tready</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>TVALID</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>s_axis_tvalid</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
			</spirit:portMaps>
		</spirit:busInterface>
		<spirit:busInterface>
			<spirit:name>aclk</spirit:name>
			<spirit:displayName>ACLK</spirit:displayName>
			<spirit:busType spirit:vendor="xilinx.com"
					spirit:library="signal"
					spirit:name="clock"
					spirit:version="1.0"/>
			<spirit:abstractionType spirit:vendor="xilinx.com"
					spirit:library="signal"
					spirit:name="clock_rtl"
					spirit:version="1.0"/>
			<spirit:slave/>
			<spirit:portMaps>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>CLK</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>aclk</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
			</spirit:portMaps>
			<spirit:parameters>
				<spirit:parameter>
					<spirit:name>ASSOCIATED_BUSIF</spirit:name>
					<spirit:value spirit:id="BUSIFPARAM_VALUE.ACLK.ASSOCIATED_BUSIF">M_AXIS:S_AXIS:M_AXI:S_AXI</spirit:value>
				</spirit:parameter>
				<spirit:parameter>
					<spirit:name>ASSOCIATED_RESET</spirit:name>
					<spirit:value spirit:id="BUSIFPARAM_VALUE.ACLK.ASSOCIATED_RESET">aresetn</spirit:value>
				</spirit:parameter>
				<spirit:parameter>
					<spirit:name>FREQ_HZ</spirit:name>
					<spirit:displayName>aclk frequency</spirit:displayName>
					<spirit:description>aclk frequency</spirit:description>
					<spirit:value spirit:format="long"
							spirit:resolve="user"
							spirit:id="BUSIFPARAM_VALUE.ACLK.FREQ_HZ"
							spirit:minimum="1"
							spirit:maximum="1000000000"
							spirit:rangeType="long">100000000</spirit:value>
				</spirit:parameter>
			</spirit:parameters>
		</spirit:busInterface>
		<spirit:busInterface>
			<spirit:name>aresetn</spirit:name>
			<spirit:displayName>ARESETN</spirit:displayName>
			<spirit:busType spirit:vendor="xilinx.com"
					spirit:library="signal"
					spirit:name="reset"
					spirit:version="1.0"/>
			<spirit:abstractionType spirit:vendor="xilinx.com"
					spirit:library="signal"
					spirit:name="reset_rtl"
					spirit:version="1.0"/>
			<spirit:slave/>
			<spirit:portMaps>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>RST</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>aresetn</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
			</spirit:portMaps>
			<spirit:parameters>
				<spirit:parameter>
					<spirit:name>POLARITY</spirit:name>
					<spirit:value spirit:id="BUSIFPARAM_VALUE.ARESETN.POLARITY">ACTIVE_LOW</spirit:value>
				</spirit:parameter>
			</spirit:parameters>
		</spirit:busInterface>
	</spirit:busInterfaces>
	<spirit:addressSpaces>
		<spirit:addressSpace>
			<spirit:name>Bridge</spirit:name>
			<spirit:range spirit:format="long"
					spirit:resolve="dependent"
					spirit:dependency="(spirit:pow(2,spirit:decode(id(&apos;PARAM_VALUE.ADDR_WIDTH&apos;))))">4294967296</spirit:range>
			<spirit:width spirit:format="long">32</spirit:width>
			<spirit:vendorExtensions>
				<xilinx:addressSpaceInfo>
					<xilinx:enablement>
						<xilinx:isEnabled xilinx:resolve="dependent"
								xilinx:id="ADDRSPACE_ENABLEMENT.Bridge"
								xilinx:dependency="(spirit:decode(id(&apos;PARAM_VALUE.INTERFACES&apos;)) != &apos;S_AXI&apos;)">true</xilinx:isEnabled>
					</xilinx:enablement>
				</xilinx:addressSpaceInfo>
			</spirit:vendorExtensions>
		</spirit:addressSpace>
	</spirit:addressSpaces>
	<spirit:model>
		<spirit:ports>
			<spirit:port>
				<spirit:name>aclk</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>wire</spirit:typeName>
							<spirit:viewNameRef>dummy_view</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
			</spirit:port>
			<spirit:port>
				<spirit:name>aresetn</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>wire</spirit:typeName>
							<spirit:viewNameRef>dummy_view</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
			</spirit:port>
			<spirit:port>
				<spirit:name>s_axi_awid</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:vector>
						<spirit:left spirit:format="long"
								spirit:resolve="dependent"
								spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_AXI_ID_WIDTH&apos;)) - 1)">0</spirit:left>
						<spirit:right spirit:format="long">0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>wire</spirit:typeName>
							<spirit:viewNameRef>dummy_view</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue spirit:format="bitString"
								spirit:resolve="dependent"
								spirit:dependency="{(spirit:decode(id(&apos;MODELPARAM_VALUE.C_AXI_ID_WIDTH&apos;))){0}}"
								spirit:bitStringLength="4">0x0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:id="PORT_ENABLEMENT.s_axi_awid"
									xilinx:dependency="(spirit:decode(id(&apos;PARAM_VALUE.INTERFACES&apos;)) != &apos;M_AXI&apos;) and (spirit:decode(id(&apos;PARAM_VALUE.ID_WIDTH&apos;)) != 0) and (spirit:decode(id(&apos;PARAM_VALUE.READ_WRITE_MODE&apos;)) != &apos;READ_ONLY&apos;)">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>s_axi_awaddr</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:vector>
						<spirit:left spirit:format="long"
								spirit:resolve="dependent"
								spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_AXI_ADDR_WIDTH&apos;)) - 1)">31</spirit:left>
						<spirit:right spirit:format="long">0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>wire</spirit:typeName>
							<spirit:viewNameRef>dummy_view</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue spirit:format="bitString"
								spirit:resolve="dependent"
								spirit:dependency="{(spirit:decode(id(&apos;MODELPARAM_VALUE.C_AXI_ADDR_WIDTH&apos;))){0}}"
								spirit:bitStringLength="32">0x00000000</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:id="PORT_ENABLEMENT.s_axi_awaddr"
									xilinx:dependency="(spirit:decode(id(&apos;PARAM_VALUE.INTERFACES&apos;)) != &apos;M_AXI&apos;) and (spirit:decode(id(&apos;PARAM_VALUE.READ_WRITE_MODE&apos;)) != &apos;READ_ONLY&apos;)">true</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>s_axi_awlen</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:vector>
						<spirit:left spirit:format="long">7</spirit:left>
						<spirit:right spirit:format="long">0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>wire</spirit:typeName>
							<spirit:viewNameRef>dummy_view</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue spirit:format="bitString"
								spirit:bitStringLength="8">0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:id="PORT_ENABLEMENT.s_axi_awlen"
									xilinx:dependency="(spirit:decode(id(&apos;PARAM_VALUE.INTERFACES&apos;)) != &apos;M_AXI&apos;) and (spirit:decode(id(&apos;PARAM_VALUE.READ_WRITE_MODE&apos;)) != &apos;READ_ONLY&apos;)">true</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>s_axi_awsize</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:vector>
						<spirit:left spirit:format="long">2</spirit:left>
						<spirit:right spirit:format="long">0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>wire</spirit:typeName>
							<spirit:viewNameRef>dummy_view</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue spirit:format="bitString"
								spirit:bitStringLength="3">0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:id="PORT_ENABLEMENT.s_axi_awsize"
									xilinx:dependency="(spirit:decode(id(&apos;PARAM_VALUE.INTERFACES&apos;)) != &apos;M_AXI&apos;) and (spirit:decode(id(&apos;PARAM_VALUE.READ_WRITE_MODE&apos;)) != &apos;READ_ONLY&apos;)">true</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>s_axi_awburst</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:vector>
						<spirit:left spirit:format="long">1</spirit:left>
						<spirit:right spirit:format="long">0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>wire</spirit:typeName>
							<spirit:viewNameRef>dummy_view</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue spirit:format="bitString"
								spirit:bitStringLength="2">0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:id="PORT_ENABLEMENT.s_axi_awburst"
									xilinx:dependency="(spirit:decode(id(&apos;PARAM_VALUE.INTERFACES&apos;)) != &apos;M_AXI&apos;) and (spirit:decode(id(&apos;PARAM_VALUE.READ_WRITE_MODE&apos;)) != &apos;READ_ONLY&apos;)">true</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>s_axi_awlock</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:vector>
						<spirit:left spirit:format="long">0</spirit:left>
						<spirit:right spirit:format="long">0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>wire</spirit:typeName>
							<spirit:viewNameRef>dummy_view</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue spirit:format="bitString"
								spirit:bitStringLength="1">0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:id="PORT_ENABLEMENT.s_axi_awlock"
									xilinx:dependency="(spirit:decode(id(&apos;PARAM_VALUE.INTERFACES&apos;)) != &apos;M_AXI&apos;) and (spirit:decode(id(&apos;PARAM_VALUE.READ_WRITE_MODE&apos;)) != &apos;READ_ONLY&apos;)">true</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>s_axi_awcache</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:vector>
						<spirit:left spirit:format="long">3</spirit:left>
						<spirit:right spirit:format="long">0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>wire</spirit:typeName>
							<spirit:viewNameRef>dummy_view</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue spirit:format="bitString"
								spirit:bitStringLength="4">0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:id="PORT_ENABLEMENT.s_axi_awcache"
									xilinx:dependency="(spirit:decode(id(&apos;PARAM_VALUE.INTERFACES&apos;)) != &apos;M_AXI&apos;) and (spirit:decode(id(&apos;PARAM_VALUE.READ_WRITE_MODE&apos;)) != &apos;READ_ONLY&apos;)">true</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>s_axi_awprot</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:vector>
						<spirit:left spirit:format="long">2</spirit:left>
						<spirit:right spirit:format="long">0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>wire</spirit:typeName>
							<spirit:viewNameRef>dummy_view</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue spirit:format="bitString"
								spirit:bitStringLength="3">0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:id="PORT_ENABLEMENT.s_axi_awprot"
									xilinx:dependency="(spirit:decode(id(&apos;PARAM_VALUE.INTERFACES&apos;)) != &apos;M_AXI&apos;) and (spirit:decode(id(&apos;PARAM_VALUE.READ_WRITE_MODE&apos;)) != &apos;READ_ONLY&apos;)">true</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>s_axi_awregion</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:vector>
						<spirit:left spirit:format="long">3</spirit:left>
						<spirit:right spirit:format="long">0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>wire</spirit:typeName>
							<spirit:viewNameRef>dummy_view</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue spirit:format="bitString"
								spirit:bitStringLength="4">0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:id="PORT_ENABLEMENT.s_axi_awregion"
									xilinx:dependency="(spirit:decode(id(&apos;PARAM_VALUE.INTERFACES&apos;)) != &apos;M_AXI&apos;) and (spirit:decode(id(&apos;PARAM_VALUE.READ_WRITE_MODE&apos;)) != &apos;READ_ONLY&apos;) and (spirit:decode(id(&apos;PARAM_VALUE.SUPPORTS_REGION&apos;)) == 1)">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>s_axi_awqos</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:vector>
						<spirit:left spirit:format="long">3</spirit:left>
						<spirit:right spirit:format="long">0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>wire</spirit:typeName>
							<spirit:viewNameRef>dummy_view</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue spirit:format="bitString"
								spirit:bitStringLength="4">0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:id="PORT_ENABLEMENT.s_axi_awqos"
									xilinx:dependency="(spirit:decode(id(&apos;PARAM_VALUE.INTERFACES&apos;)) != &apos;M_AXI&apos;) and (spirit:decode(id(&apos;PARAM_VALUE.READ_WRITE_MODE&apos;)) != &apos;READ_ONLY&apos;)">true</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>s_axi_awuser</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:vector>
						<spirit:left spirit:format="long"
								spirit:resolve="dependent"
								spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_AXI_AWUSER_WIDTH&apos;)) - 1)">0</spirit:left>
						<spirit:right spirit:format="long">0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>wire</spirit:typeName>
							<spirit:viewNameRef>dummy_view</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue spirit:format="bitString"
								spirit:resolve="dependent"
								spirit:dependency="{(spirit:decode(id(&apos;MODELPARAM_VALUE.C_AXI_AWUSER_WIDTH&apos;))){0}}"
								spirit:bitStringLength="1">0x0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:id="PORT_ENABLEMENT.s_axi_awuser"
									xilinx:dependency="(spirit:decode(id(&apos;PARAM_VALUE.INTERFACES&apos;)) != &apos;M_AXI&apos;) and (spirit:decode(id(&apos;PARAM_VALUE.AWUSER_WIDTH&apos;)) != 0) and (spirit:decode(id(&apos;PARAM_VALUE.READ_WRITE_MODE&apos;)) != &apos;READ_ONLY&apos;)">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>s_axi_awvalid</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>wire</spirit:typeName>
							<spirit:viewNameRef>dummy_view</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue spirit:format="bitString"
								spirit:bitStringLength="1">0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:id="PORT_ENABLEMENT.s_axi_awvalid"
									xilinx:dependency="(spirit:decode(id(&apos;PARAM_VALUE.INTERFACES&apos;)) != &apos;M_AXI&apos;) and (spirit:decode(id(&apos;PARAM_VALUE.READ_WRITE_MODE&apos;)) != &apos;READ_ONLY&apos;)">true</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>s_axi_awready</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>wire</spirit:typeName>
							<spirit:viewNameRef>dummy_view</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:id="PORT_ENABLEMENT.s_axi_awready"
									xilinx:dependency="(spirit:decode(id(&apos;PARAM_VALUE.INTERFACES&apos;)) != &apos;M_AXI&apos;) and (spirit:decode(id(&apos;PARAM_VALUE.READ_WRITE_MODE&apos;)) != &apos;READ_ONLY&apos;)">true</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>s_axi_wdata</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:vector>
						<spirit:left spirit:format="long"
								spirit:resolve="dependent"
								spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_AXI_DATA_WIDTH&apos;)) - 1)">31</spirit:left>
						<spirit:right spirit:format="long">0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>wire</spirit:typeName>
							<spirit:viewNameRef>dummy_view</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue spirit:format="bitString"
								spirit:resolve="dependent"
								spirit:dependency="{(spirit:decode(id(&apos;MODELPARAM_VALUE.C_AXI_DATA_WIDTH&apos;))){0}}"
								spirit:bitStringLength="32">0x00000000</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:id="PORT_ENABLEMENT.s_axi_wdata"
									xilinx:dependency="(spirit:decode(id(&apos;PARAM_VALUE.INTERFACES&apos;)) != &apos;M_AXI&apos;) and (spirit:decode(id(&apos;PARAM_VALUE.READ_WRITE_MODE&apos;)) != &apos;READ_ONLY&apos;)">true</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>s_axi_wstrb</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:vector>
						<spirit:left spirit:format="long"
								spirit:resolve="dependent"
								spirit:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AXI_DATA_WIDTH&apos;)) / 8) - 1)">3</spirit:left>
						<spirit:right spirit:format="long">0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>wire</spirit:typeName>
							<spirit:viewNameRef>dummy_view</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue spirit:format="bitString"
								spirit:resolve="dependent"
								spirit:dependency="{((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AXI_DATA_WIDTH&apos;)) div 8)){1}}"
								spirit:bitStringLength="4">0xF</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:id="PORT_ENABLEMENT.s_axi_wstrb"
									xilinx:dependency="(spirit:decode(id(&apos;PARAM_VALUE.INTERFACES&apos;)) != &apos;M_AXI&apos;) and (spirit:decode(id(&apos;PARAM_VALUE.READ_WRITE_MODE&apos;)) != &apos;READ_ONLY&apos;)">true</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>s_axi_wlast</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>wire</spirit:typeName>
							<spirit:viewNameRef>dummy_view</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue spirit:format="bitString"
								spirit:bitStringLength="1">1</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:id="PORT_ENABLEMENT.s_axi_wlast"
									xilinx:dependency="(spirit:decode(id(&apos;PARAM_VALUE.INTERFACES&apos;)) != &apos;M_AXI&apos;) and (spirit:decode(id(&apos;PARAM_VALUE.READ_WRITE_MODE&apos;)) != &apos;READ_ONLY&apos;)">true</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>s_axi_wuser</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:vector>
						<spirit:left spirit:format="long"
								spirit:resolve="dependent"
								spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_AXI_WUSER_WIDTH&apos;)) - 1)">0</spirit:left>
						<spirit:right spirit:format="long">0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>wire</spirit:typeName>
							<spirit:viewNameRef>dummy_view</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue spirit:format="bitString"
								spirit:resolve="dependent"
								spirit:dependency="{(spirit:decode(id(&apos;MODELPARAM_VALUE.C_AXI_WUSER_WIDTH&apos;))){0}}"
								spirit:bitStringLength="1">0x0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:id="PORT_ENABLEMENT.s_axi_wuser"
									xilinx:dependency="(spirit:decode(id(&apos;PARAM_VALUE.INTERFACES&apos;)) != &apos;M_AXI&apos;) and (spirit:decode(id(&apos;PARAM_VALUE.WUSER_WIDTH&apos;)) != 0) and (spirit:decode(id(&apos;PARAM_VALUE.READ_WRITE_MODE&apos;)) != &apos;READ_ONLY&apos;)">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>s_axi_wvalid</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>wire</spirit:typeName>
							<spirit:viewNameRef>dummy_view</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue spirit:format="bitString"
								spirit:bitStringLength="1">0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:id="PORT_ENABLEMENT.s_axi_wvalid"
									xilinx:dependency="(spirit:decode(id(&apos;PARAM_VALUE.INTERFACES&apos;)) != &apos;M_AXI&apos;) and (spirit:decode(id(&apos;PARAM_VALUE.READ_WRITE_MODE&apos;)) != &apos;READ_ONLY&apos;)">true</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>s_axi_wready</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>wire</spirit:typeName>
							<spirit:viewNameRef>dummy_view</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:id="PORT_ENABLEMENT.s_axi_wready"
									xilinx:dependency="(spirit:decode(id(&apos;PARAM_VALUE.INTERFACES&apos;)) != &apos;M_AXI&apos;) and (spirit:decode(id(&apos;PARAM_VALUE.READ_WRITE_MODE&apos;)) != &apos;READ_ONLY&apos;)">true</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>s_axi_bid</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:vector>
						<spirit:left spirit:format="long"
								spirit:resolve="dependent"
								spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_AXI_ID_WIDTH&apos;)) - 1)">0</spirit:left>
						<spirit:right spirit:format="long">0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>wire</spirit:typeName>
							<spirit:viewNameRef>dummy_view</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:id="PORT_ENABLEMENT.s_axi_bid"
									xilinx:dependency="(spirit:decode(id(&apos;PARAM_VALUE.INTERFACES&apos;)) != &apos;M_AXI&apos;) and (spirit:decode(id(&apos;PARAM_VALUE.ID_WIDTH&apos;)) != 0) and (spirit:decode(id(&apos;PARAM_VALUE.READ_WRITE_MODE&apos;)) != &apos;READ_ONLY&apos;)">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>s_axi_bresp</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:vector>
						<spirit:left spirit:format="long">1</spirit:left>
						<spirit:right spirit:format="long">0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>wire</spirit:typeName>
							<spirit:viewNameRef>dummy_view</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:id="PORT_ENABLEMENT.s_axi_bresp"
									xilinx:dependency="(spirit:decode(id(&apos;PARAM_VALUE.INTERFACES&apos;)) != &apos;M_AXI&apos;) and (spirit:decode(id(&apos;PARAM_VALUE.READ_WRITE_MODE&apos;)) != &apos;READ_ONLY&apos;)">true</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>s_axi_buser</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:vector>
						<spirit:left spirit:format="long"
								spirit:resolve="dependent"
								spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_AXI_BUSER_WIDTH&apos;)) - 1)">0</spirit:left>
						<spirit:right spirit:format="long">0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>wire</spirit:typeName>
							<spirit:viewNameRef>dummy_view</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:id="PORT_ENABLEMENT.s_axi_buser"
									xilinx:dependency="(spirit:decode(id(&apos;PARAM_VALUE.INTERFACES&apos;)) != &apos;M_AXI&apos;) and (spirit:decode(id(&apos;PARAM_VALUE.BUSER_WIDTH&apos;)) != 0) and (spirit:decode(id(&apos;PARAM_VALUE.READ_WRITE_MODE&apos;)) != &apos;READ_ONLY&apos;)">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>s_axi_bvalid</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>wire</spirit:typeName>
							<spirit:viewNameRef>dummy_view</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:id="PORT_ENABLEMENT.s_axi_bvalid"
									xilinx:dependency="(spirit:decode(id(&apos;PARAM_VALUE.INTERFACES&apos;)) != &apos;M_AXI&apos;) and (spirit:decode(id(&apos;PARAM_VALUE.READ_WRITE_MODE&apos;)) != &apos;READ_ONLY&apos;)">true</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>s_axi_bready</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>wire</spirit:typeName>
							<spirit:viewNameRef>dummy_view</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue spirit:format="long"
								spirit:bitStringLength="1">0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:id="PORT_ENABLEMENT.s_axi_bready"
									xilinx:dependency="(spirit:decode(id(&apos;PARAM_VALUE.INTERFACES&apos;)) != &apos;M_AXI&apos;) and (spirit:decode(id(&apos;PARAM_VALUE.READ_WRITE_MODE&apos;)) != &apos;READ_ONLY&apos;)">true</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>s_axi_arid</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:vector>
						<spirit:left spirit:format="long"
								spirit:resolve="dependent"
								spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_AXI_ID_WIDTH&apos;)) - 1)">0</spirit:left>
						<spirit:right spirit:format="long">0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>wire</spirit:typeName>
							<spirit:viewNameRef>dummy_view</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue spirit:format="bitString"
								spirit:resolve="dependent"
								spirit:dependency="{(spirit:decode(id(&apos;MODELPARAM_VALUE.C_AXI_ID_WIDTH&apos;))){0}}"
								spirit:bitStringLength="4">0x0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:id="PORT_ENABLEMENT.s_axi_arid"
									xilinx:dependency="(spirit:decode(id(&apos;PARAM_VALUE.INTERFACES&apos;)) != &apos;M_AXI&apos;) and (spirit:decode(id(&apos;PARAM_VALUE.ID_WIDTH&apos;)) != 0) and (spirit:decode(id(&apos;PARAM_VALUE.READ_WRITE_MODE&apos;)) != &apos;WRITE_ONLY&apos;)">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>s_axi_araddr</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:vector>
						<spirit:left spirit:format="long"
								spirit:resolve="dependent"
								spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_AXI_ADDR_WIDTH&apos;)) - 1)">31</spirit:left>
						<spirit:right spirit:format="long">0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>wire</spirit:typeName>
							<spirit:viewNameRef>dummy_view</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue spirit:format="bitString"
								spirit:resolve="dependent"
								spirit:dependency="{(spirit:decode(id(&apos;MODELPARAM_VALUE.C_AXI_ADDR_WIDTH&apos;))){0}}"
								spirit:bitStringLength="32">0x00000000</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:id="PORT_ENABLEMENT.s_axi_araddr"
									xilinx:dependency="(spirit:decode(id(&apos;PARAM_VALUE.INTERFACES&apos;)) != &apos;M_AXI&apos;) and (spirit:decode(id(&apos;PARAM_VALUE.READ_WRITE_MODE&apos;)) != &apos;WRITE_ONLY&apos;)">true</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>s_axi_arlen</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:vector>
						<spirit:left spirit:format="long">7</spirit:left>
						<spirit:right spirit:format="long">0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>wire</spirit:typeName>
							<spirit:viewNameRef>dummy_view</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue spirit:format="bitString"
								spirit:bitStringLength="8">0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:id="PORT_ENABLEMENT.s_axi_arlen"
									xilinx:dependency="(spirit:decode(id(&apos;PARAM_VALUE.INTERFACES&apos;)) != &apos;M_AXI&apos;) and (spirit:decode(id(&apos;PARAM_VALUE.READ_WRITE_MODE&apos;)) != &apos;WRITE_ONLY&apos;)">true</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>s_axi_arsize</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:vector>
						<spirit:left spirit:format="long">2</spirit:left>
						<spirit:right spirit:format="long">0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>wire</spirit:typeName>
							<spirit:viewNameRef>dummy_view</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue spirit:format="bitString"
								spirit:bitStringLength="3">0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:id="PORT_ENABLEMENT.s_axi_arsize"
									xilinx:dependency="(spirit:decode(id(&apos;PARAM_VALUE.INTERFACES&apos;)) != &apos;M_AXI&apos;) and (spirit:decode(id(&apos;PARAM_VALUE.READ_WRITE_MODE&apos;)) != &apos;WRITE_ONLY&apos;)">true</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>s_axi_arburst</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:vector>
						<spirit:left spirit:format="long">1</spirit:left>
						<spirit:right spirit:format="long">0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>wire</spirit:typeName>
							<spirit:viewNameRef>dummy_view</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue spirit:format="bitString"
								spirit:bitStringLength="2">0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:id="PORT_ENABLEMENT.s_axi_arburst"
									xilinx:dependency="(spirit:decode(id(&apos;PARAM_VALUE.INTERFACES&apos;)) != &apos;M_AXI&apos;) and (spirit:decode(id(&apos;PARAM_VALUE.READ_WRITE_MODE&apos;)) != &apos;WRITE_ONLY&apos;)">true</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>s_axi_arlock</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:vector>
						<spirit:left spirit:format="long">0</spirit:left>
						<spirit:right spirit:format="long">0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>wire</spirit:typeName>
							<spirit:viewNameRef>dummy_view</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue spirit:format="bitString"
								spirit:bitStringLength="1">0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:id="PORT_ENABLEMENT.s_axi_arlock"
									xilinx:dependency="(spirit:decode(id(&apos;PARAM_VALUE.INTERFACES&apos;)) != &apos;M_AXI&apos;) and (spirit:decode(id(&apos;PARAM_VALUE.READ_WRITE_MODE&apos;)) != &apos;WRITE_ONLY&apos;)">true</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>s_axi_arcache</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:vector>
						<spirit:left spirit:format="long">3</spirit:left>
						<spirit:right spirit:format="long">0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>wire</spirit:typeName>
							<spirit:viewNameRef>dummy_view</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue spirit:format="bitString"
								spirit:bitStringLength="4">0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:id="PORT_ENABLEMENT.s_axi_arcache"
									xilinx:dependency="(spirit:decode(id(&apos;PARAM_VALUE.INTERFACES&apos;)) != &apos;M_AXI&apos;) and (spirit:decode(id(&apos;PARAM_VALUE.READ_WRITE_MODE&apos;)) != &apos;WRITE_ONLY&apos;)">true</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>s_axi_arprot</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:vector>
						<spirit:left spirit:format="long">2</spirit:left>
						<spirit:right spirit:format="long">0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>wire</spirit:typeName>
							<spirit:viewNameRef>dummy_view</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue spirit:format="bitString"
								spirit:bitStringLength="3">0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:id="PORT_ENABLEMENT.s_axi_arprot"
									xilinx:dependency="(spirit:decode(id(&apos;PARAM_VALUE.INTERFACES&apos;)) != &apos;M_AXI&apos;) and (spirit:decode(id(&apos;PARAM_VALUE.READ_WRITE_MODE&apos;)) != &apos;WRITE_ONLY&apos;)">true</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>s_axi_arregion</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:vector>
						<spirit:left spirit:format="long">3</spirit:left>
						<spirit:right spirit:format="long">0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>wire</spirit:typeName>
							<spirit:viewNameRef>dummy_view</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue spirit:format="bitString"
								spirit:bitStringLength="4">0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:id="PORT_ENABLEMENT.s_axi_arregion"
									xilinx:dependency="(spirit:decode(id(&apos;PARAM_VALUE.INTERFACES&apos;)) != &apos;M_AXI&apos;) and (spirit:decode(id(&apos;PARAM_VALUE.READ_WRITE_MODE&apos;)) != &apos;WRITE_ONLY&apos;) and (spirit:decode(id(&apos;PARAM_VALUE.SUPPORTS_REGION&apos;)) == 1)">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>s_axi_arqos</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:vector>
						<spirit:left spirit:format="long">3</spirit:left>
						<spirit:right spirit:format="long">0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>wire</spirit:typeName>
							<spirit:viewNameRef>dummy_view</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue spirit:format="bitString"
								spirit:bitStringLength="4">0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:id="PORT_ENABLEMENT.s_axi_arqos"
									xilinx:dependency="(spirit:decode(id(&apos;PARAM_VALUE.INTERFACES&apos;)) != &apos;M_AXI&apos;) and (spirit:decode(id(&apos;PARAM_VALUE.READ_WRITE_MODE&apos;)) != &apos;WRITE_ONLY&apos;)">true</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>s_axi_aruser</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:vector>
						<spirit:left spirit:format="long"
								spirit:resolve="dependent"
								spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_AXI_ARUSER_WIDTH&apos;)) - 1)">0</spirit:left>
						<spirit:right spirit:format="long">0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>wire</spirit:typeName>
							<spirit:viewNameRef>dummy_view</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue spirit:format="bitString"
								spirit:resolve="dependent"
								spirit:dependency="{(spirit:decode(id(&apos;MODELPARAM_VALUE.C_AXI_ARUSER_WIDTH&apos;))){0}}"
								spirit:bitStringLength="1">0x0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:id="PORT_ENABLEMENT.s_axi_aruser"
									xilinx:dependency="(spirit:decode(id(&apos;PARAM_VALUE.INTERFACES&apos;)) != &apos;M_AXI&apos;) and (spirit:decode(id(&apos;PARAM_VALUE.ARUSER_WIDTH&apos;)) != 0) and (spirit:decode(id(&apos;PARAM_VALUE.READ_WRITE_MODE&apos;)) != &apos;WRITE_ONLY&apos;)">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>s_axi_arvalid</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>wire</spirit:typeName>
							<spirit:viewNameRef>dummy_view</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue spirit:format="bitString"
								spirit:bitStringLength="1">0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:id="PORT_ENABLEMENT.s_axi_arvalid"
									xilinx:dependency="(spirit:decode(id(&apos;PARAM_VALUE.INTERFACES&apos;)) != &apos;M_AXI&apos;) and (spirit:decode(id(&apos;PARAM_VALUE.READ_WRITE_MODE&apos;)) != &apos;WRITE_ONLY&apos;)">true</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>s_axi_arready</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>wire</spirit:typeName>
							<spirit:viewNameRef>dummy_view</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:id="PORT_ENABLEMENT.s_axi_arready"
									xilinx:dependency="(spirit:decode(id(&apos;PARAM_VALUE.INTERFACES&apos;)) != &apos;M_AXI&apos;) and (spirit:decode(id(&apos;PARAM_VALUE.READ_WRITE_MODE&apos;)) != &apos;WRITE_ONLY&apos;)">true</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>s_axi_rid</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:vector>
						<spirit:left spirit:format="long"
								spirit:resolve="dependent"
								spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_AXI_ID_WIDTH&apos;)) - 1)">0</spirit:left>
						<spirit:right spirit:format="long">0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>wire</spirit:typeName>
							<spirit:viewNameRef>dummy_view</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:id="PORT_ENABLEMENT.s_axi_rid"
									xilinx:dependency="(spirit:decode(id(&apos;PARAM_VALUE.INTERFACES&apos;)) != &apos;M_AXI&apos;) and (spirit:decode(id(&apos;PARAM_VALUE.ID_WIDTH&apos;)) != 0) and (spirit:decode(id(&apos;PARAM_VALUE.READ_WRITE_MODE&apos;)) != &apos;WRITE_ONLY&apos;)">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>s_axi_rdata</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:vector>
						<spirit:left spirit:format="long"
								spirit:resolve="dependent"
								spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_AXI_DATA_WIDTH&apos;)) - 1)">31</spirit:left>
						<spirit:right spirit:format="long">0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>wire</spirit:typeName>
							<spirit:viewNameRef>dummy_view</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:id="PORT_ENABLEMENT.s_axi_rdata"
									xilinx:dependency="(spirit:decode(id(&apos;PARAM_VALUE.INTERFACES&apos;)) != &apos;M_AXI&apos;) and (spirit:decode(id(&apos;PARAM_VALUE.READ_WRITE_MODE&apos;)) != &apos;WRITE_ONLY&apos;)">true</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>s_axi_rresp</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:vector>
						<spirit:left spirit:format="long">1</spirit:left>
						<spirit:right spirit:format="long">0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>wire</spirit:typeName>
							<spirit:viewNameRef>dummy_view</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:id="PORT_ENABLEMENT.s_axi_rresp"
									xilinx:dependency="(spirit:decode(id(&apos;PARAM_VALUE.INTERFACES&apos;)) != &apos;M_AXI&apos;) and (spirit:decode(id(&apos;PARAM_VALUE.READ_WRITE_MODE&apos;)) != &apos;WRITE_ONLY&apos;)">true</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>s_axi_rlast</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>wire</spirit:typeName>
							<spirit:viewNameRef>dummy_view</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:id="PORT_ENABLEMENT.s_axi_rlast"
									xilinx:dependency="(spirit:decode(id(&apos;PARAM_VALUE.INTERFACES&apos;)) != &apos;M_AXI&apos;) and (spirit:decode(id(&apos;PARAM_VALUE.READ_WRITE_MODE&apos;)) != &apos;WRITE_ONLY&apos;)">true</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>s_axi_ruser</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:vector>
						<spirit:left spirit:format="long"
								spirit:resolve="dependent"
								spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_AXI_RUSER_WIDTH&apos;)) - 1)">0</spirit:left>
						<spirit:right spirit:format="long">0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>wire</spirit:typeName>
							<spirit:viewNameRef>dummy_view</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:id="PORT_ENABLEMENT.s_axi_ruser"
									xilinx:dependency="(spirit:decode(id(&apos;PARAM_VALUE.INTERFACES&apos;)) != &apos;M_AXI&apos;) and (spirit:decode(id(&apos;PARAM_VALUE.RUSER_WIDTH&apos;)) != 0) and (spirit:decode(id(&apos;PARAM_VALUE.READ_WRITE_MODE&apos;)) != &apos;WRITE_ONLY&apos;)">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>s_axi_rvalid</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>wire</spirit:typeName>
							<spirit:viewNameRef>dummy_view</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:id="PORT_ENABLEMENT.s_axi_rvalid"
									xilinx:dependency="(spirit:decode(id(&apos;PARAM_VALUE.INTERFACES&apos;)) != &apos;M_AXI&apos;) and (spirit:decode(id(&apos;PARAM_VALUE.READ_WRITE_MODE&apos;)) != &apos;WRITE_ONLY&apos;)">true</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>s_axi_rready</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>wire</spirit:typeName>
							<spirit:viewNameRef>dummy_view</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue spirit:format="bitString"
								spirit:bitStringLength="1">0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:id="PORT_ENABLEMENT.s_axi_rready"
									xilinx:dependency="(spirit:decode(id(&apos;PARAM_VALUE.INTERFACES&apos;)) != &apos;M_AXI&apos;) and (spirit:decode(id(&apos;PARAM_VALUE.READ_WRITE_MODE&apos;)) != &apos;WRITE_ONLY&apos;)">true</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>m_axi_awid</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:vector>
						<spirit:left spirit:format="long"
								spirit:resolve="dependent"
								spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_AXI_ID_WIDTH&apos;)) - 1)">0</spirit:left>
						<spirit:right spirit:format="long">0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>wire</spirit:typeName>
							<spirit:viewNameRef>dummy_view</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:id="PORT_ENABLEMENT.m_axi_awid"
									xilinx:dependency="(spirit:decode(id(&apos;PARAM_VALUE.INTERFACES&apos;)) != &apos;S_AXI&apos;) and (spirit:decode(id(&apos;PARAM_VALUE.ID_WIDTH&apos;)) != 0) and (spirit:decode(id(&apos;PARAM_VALUE.READ_WRITE_MODE&apos;)) != &apos;READ_ONLY&apos;)">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>m_axi_awaddr</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:vector>
						<spirit:left spirit:format="long"
								spirit:resolve="dependent"
								spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_AXI_ADDR_WIDTH&apos;)) - 1)">31</spirit:left>
						<spirit:right spirit:format="long">0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>wire</spirit:typeName>
							<spirit:viewNameRef>dummy_view</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:id="PORT_ENABLEMENT.m_axi_awaddr"
									xilinx:dependency="(spirit:decode(id(&apos;PARAM_VALUE.INTERFACES&apos;)) != &apos;S_AXI&apos;) and (spirit:decode(id(&apos;PARAM_VALUE.READ_WRITE_MODE&apos;)) != &apos;READ_ONLY&apos;)">true</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>m_axi_awlen</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:vector>
						<spirit:left spirit:format="long">7</spirit:left>
						<spirit:right spirit:format="long">0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>wire</spirit:typeName>
							<spirit:viewNameRef>dummy_view</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:id="PORT_ENABLEMENT.m_axi_awlen"
									xilinx:dependency="(spirit:decode(id(&apos;PARAM_VALUE.INTERFACES&apos;)) != &apos;S_AXI&apos;) and (spirit:decode(id(&apos;PARAM_VALUE.READ_WRITE_MODE&apos;)) != &apos;READ_ONLY&apos;)">true</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>m_axi_awsize</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:vector>
						<spirit:left spirit:format="long">2</spirit:left>
						<spirit:right spirit:format="long">0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>wire</spirit:typeName>
							<spirit:viewNameRef>dummy_view</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:id="PORT_ENABLEMENT.m_axi_awsize"
									xilinx:dependency="(spirit:decode(id(&apos;PARAM_VALUE.INTERFACES&apos;)) != &apos;S_AXI&apos;) and (spirit:decode(id(&apos;PARAM_VALUE.READ_WRITE_MODE&apos;)) != &apos;READ_ONLY&apos;)">true</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>m_axi_awburst</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:vector>
						<spirit:left spirit:format="long">1</spirit:left>
						<spirit:right spirit:format="long">0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>wire</spirit:typeName>
							<spirit:viewNameRef>dummy_view</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:id="PORT_ENABLEMENT.m_axi_awburst"
									xilinx:dependency="(spirit:decode(id(&apos;PARAM_VALUE.INTERFACES&apos;)) != &apos;S_AXI&apos;) and (spirit:decode(id(&apos;PARAM_VALUE.READ_WRITE_MODE&apos;)) != &apos;READ_ONLY&apos;)">true</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>m_axi_awlock</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:vector>
						<spirit:left spirit:format="long">0</spirit:left>
						<spirit:right spirit:format="long">0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>wire</spirit:typeName>
							<spirit:viewNameRef>dummy_view</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:id="PORT_ENABLEMENT.m_axi_awlock"
									xilinx:dependency="(spirit:decode(id(&apos;PARAM_VALUE.INTERFACES&apos;)) != &apos;S_AXI&apos;) and (spirit:decode(id(&apos;PARAM_VALUE.READ_WRITE_MODE&apos;)) != &apos;READ_ONLY&apos;)">true</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>m_axi_awcache</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:vector>
						<spirit:left spirit:format="long">3</spirit:left>
						<spirit:right spirit:format="long">0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>wire</spirit:typeName>
							<spirit:viewNameRef>dummy_view</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:id="PORT_ENABLEMENT.m_axi_awcache"
									xilinx:dependency="(spirit:decode(id(&apos;PARAM_VALUE.INTERFACES&apos;)) != &apos;S_AXI&apos;) and (spirit:decode(id(&apos;PARAM_VALUE.READ_WRITE_MODE&apos;)) != &apos;READ_ONLY&apos;)">true</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>m_axi_awprot</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:vector>
						<spirit:left spirit:format="long">2</spirit:left>
						<spirit:right spirit:format="long">0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>wire</spirit:typeName>
							<spirit:viewNameRef>dummy_view</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:id="PORT_ENABLEMENT.m_axi_awprot"
									xilinx:dependency="(spirit:decode(id(&apos;PARAM_VALUE.INTERFACES&apos;)) != &apos;S_AXI&apos;) and (spirit:decode(id(&apos;PARAM_VALUE.READ_WRITE_MODE&apos;)) != &apos;READ_ONLY&apos;)">true</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>m_axi_awregion</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:vector>
						<spirit:left spirit:format="long">3</spirit:left>
						<spirit:right spirit:format="long">0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>wire</spirit:typeName>
							<spirit:viewNameRef>dummy_view</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:id="PORT_ENABLEMENT.m_axi_awregion"
									xilinx:dependency="(spirit:decode(id(&apos;PARAM_VALUE.INTERFACES&apos;)) != &apos;S_AXI&apos;) and (spirit:decode(id(&apos;PARAM_VALUE.READ_WRITE_MODE&apos;)) != &apos;READ_ONLY&apos;) and (spirit:decode(id(&apos;PARAM_VALUE.SUPPORTS_REGION&apos;)) == 1)">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>m_axi_awqos</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:vector>
						<spirit:left spirit:format="long">3</spirit:left>
						<spirit:right spirit:format="long">0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>wire</spirit:typeName>
							<spirit:viewNameRef>dummy_view</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:id="PORT_ENABLEMENT.m_axi_awqos"
									xilinx:dependency="(spirit:decode(id(&apos;PARAM_VALUE.INTERFACES&apos;)) != &apos;S_AXI&apos;) and (spirit:decode(id(&apos;PARAM_VALUE.READ_WRITE_MODE&apos;)) != &apos;READ_ONLY&apos;)">true</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>m_axi_awuser</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:vector>
						<spirit:left spirit:format="long"
								spirit:resolve="dependent"
								spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_AXI_AWUSER_WIDTH&apos;)) - 1)">0</spirit:left>
						<spirit:right spirit:format="long">0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>wire</spirit:typeName>
							<spirit:viewNameRef>dummy_view</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:id="PORT_ENABLEMENT.m_axi_awuser"
									xilinx:dependency="(spirit:decode(id(&apos;PARAM_VALUE.INTERFACES&apos;)) != &apos;S_AXI&apos;) and (spirit:decode(id(&apos;PARAM_VALUE.AWUSER_WIDTH&apos;)) != 0) and (spirit:decode(id(&apos;PARAM_VALUE.READ_WRITE_MODE&apos;)) != &apos;READ_ONLY&apos;)">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>m_axi_awvalid</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>wire</spirit:typeName>
							<spirit:viewNameRef>dummy_view</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:id="PORT_ENABLEMENT.m_axi_awvalid"
									xilinx:dependency="(spirit:decode(id(&apos;PARAM_VALUE.INTERFACES&apos;)) != &apos;S_AXI&apos;) and (spirit:decode(id(&apos;PARAM_VALUE.READ_WRITE_MODE&apos;)) != &apos;READ_ONLY&apos;)">true</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>m_axi_awready</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>wire</spirit:typeName>
							<spirit:viewNameRef>dummy_view</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue spirit:format="bitString"
								spirit:bitStringLength="1">0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:id="PORT_ENABLEMENT.m_axi_awready"
									xilinx:dependency="(spirit:decode(id(&apos;PARAM_VALUE.INTERFACES&apos;)) != &apos;S_AXI&apos;) and (spirit:decode(id(&apos;PARAM_VALUE.READ_WRITE_MODE&apos;)) != &apos;READ_ONLY&apos;)">true</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>m_axi_wdata</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:vector>
						<spirit:left spirit:format="long"
								spirit:resolve="dependent"
								spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_AXI_DATA_WIDTH&apos;)) - 1)">31</spirit:left>
						<spirit:right spirit:format="long">0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>wire</spirit:typeName>
							<spirit:viewNameRef>dummy_view</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:id="PORT_ENABLEMENT.m_axi_wdata"
									xilinx:dependency="(spirit:decode(id(&apos;PARAM_VALUE.INTERFACES&apos;)) != &apos;S_AXI&apos;) and (spirit:decode(id(&apos;PARAM_VALUE.READ_WRITE_MODE&apos;)) != &apos;READ_ONLY&apos;)">true</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>m_axi_wstrb</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:vector>
						<spirit:left spirit:format="long"
								spirit:resolve="dependent"
								spirit:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AXI_DATA_WIDTH&apos;)) / 8) - 1)">3</spirit:left>
						<spirit:right spirit:format="long">0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>wire</spirit:typeName>
							<spirit:viewNameRef>dummy_view</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:id="PORT_ENABLEMENT.m_axi_wstrb"
									xilinx:dependency="(spirit:decode(id(&apos;PARAM_VALUE.INTERFACES&apos;)) != &apos;S_AXI&apos;) and (spirit:decode(id(&apos;PARAM_VALUE.READ_WRITE_MODE&apos;)) != &apos;READ_ONLY&apos;)">true</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>m_axi_wlast</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>wire</spirit:typeName>
							<spirit:viewNameRef>dummy_view</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:id="PORT_ENABLEMENT.m_axi_wlast"
									xilinx:dependency="(spirit:decode(id(&apos;PARAM_VALUE.INTERFACES&apos;)) != &apos;S_AXI&apos;) and (spirit:decode(id(&apos;PARAM_VALUE.READ_WRITE_MODE&apos;)) != &apos;READ_ONLY&apos;)">true</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>m_axi_wuser</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:vector>
						<spirit:left spirit:format="long"
								spirit:resolve="dependent"
								spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_AXI_WUSER_WIDTH&apos;)) - 1)">0</spirit:left>
						<spirit:right spirit:format="long">0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>wire</spirit:typeName>
							<spirit:viewNameRef>dummy_view</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:id="PORT_ENABLEMENT.m_axi_wuser"
									xilinx:dependency="(spirit:decode(id(&apos;PARAM_VALUE.INTERFACES&apos;)) != &apos;S_AXI&apos;) and (spirit:decode(id(&apos;PARAM_VALUE.WUSER_WIDTH&apos;)) != 0) and (spirit:decode(id(&apos;PARAM_VALUE.READ_WRITE_MODE&apos;)) != &apos;READ_ONLY&apos;)">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>m_axi_wvalid</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>wire</spirit:typeName>
							<spirit:viewNameRef>dummy_view</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:id="PORT_ENABLEMENT.m_axi_wvalid"
									xilinx:dependency="(spirit:decode(id(&apos;PARAM_VALUE.INTERFACES&apos;)) != &apos;S_AXI&apos;) and (spirit:decode(id(&apos;PARAM_VALUE.READ_WRITE_MODE&apos;)) != &apos;READ_ONLY&apos;)">true</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>m_axi_wready</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>wire</spirit:typeName>
							<spirit:viewNameRef>dummy_view</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue spirit:format="bitString"
								spirit:bitStringLength="1">0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:id="PORT_ENABLEMENT.m_axi_wready"
									xilinx:dependency="(spirit:decode(id(&apos;PARAM_VALUE.INTERFACES&apos;)) != &apos;S_AXI&apos;) and (spirit:decode(id(&apos;PARAM_VALUE.READ_WRITE_MODE&apos;)) != &apos;READ_ONLY&apos;)">true</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>m_axi_bid</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:vector>
						<spirit:left spirit:format="long"
								spirit:resolve="dependent"
								spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_AXI_ID_WIDTH&apos;)) - 1)">0</spirit:left>
						<spirit:right spirit:format="long">0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>wire</spirit:typeName>
							<spirit:viewNameRef>dummy_view</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue spirit:format="bitString"
								spirit:resolve="dependent"
								spirit:dependency="{(spirit:decode(id(&apos;MODELPARAM_VALUE.C_AXI_ID_WIDTH&apos;))){0}}"
								spirit:bitStringLength="4">0x0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:id="PORT_ENABLEMENT.m_axi_bid"
									xilinx:dependency="(spirit:decode(id(&apos;PARAM_VALUE.INTERFACES&apos;)) != &apos;S_AXI&apos;) and (spirit:decode(id(&apos;PARAM_VALUE.ID_WIDTH&apos;)) != 0) and (spirit:decode(id(&apos;PARAM_VALUE.READ_WRITE_MODE&apos;)) != &apos;READ_ONLY&apos;)">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>m_axi_bresp</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:vector>
						<spirit:left spirit:format="long">1</spirit:left>
						<spirit:right spirit:format="long">0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>wire</spirit:typeName>
							<spirit:viewNameRef>dummy_view</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue spirit:format="bitString"
								spirit:bitStringLength="2">0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:id="PORT_ENABLEMENT.m_axi_bresp"
									xilinx:dependency="(spirit:decode(id(&apos;PARAM_VALUE.INTERFACES&apos;)) != &apos;S_AXI&apos;) and (spirit:decode(id(&apos;PARAM_VALUE.READ_WRITE_MODE&apos;)) != &apos;READ_ONLY&apos;)">true</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>m_axi_buser</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:vector>
						<spirit:left spirit:format="long"
								spirit:resolve="dependent"
								spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_AXI_BUSER_WIDTH&apos;)) - 1)">0</spirit:left>
						<spirit:right spirit:format="long">0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>wire</spirit:typeName>
							<spirit:viewNameRef>dummy_view</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue spirit:format="bitString"
								spirit:resolve="dependent"
								spirit:dependency="{(spirit:decode(id(&apos;MODELPARAM_VALUE.C_AXI_BUSER_WIDTH&apos;))){0}}"
								spirit:bitStringLength="1">0x0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:id="PORT_ENABLEMENT.m_axi_buser"
									xilinx:dependency="(spirit:decode(id(&apos;PARAM_VALUE.INTERFACES&apos;)) != &apos;S_AXI&apos;) and (spirit:decode(id(&apos;PARAM_VALUE.BUSER_WIDTH&apos;)) != 0) and (spirit:decode(id(&apos;PARAM_VALUE.READ_WRITE_MODE&apos;)) != &apos;READ_ONLY&apos;)">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>m_axi_bvalid</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>wire</spirit:typeName>
							<spirit:viewNameRef>dummy_view</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue spirit:format="bitString"
								spirit:bitStringLength="1">0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:id="PORT_ENABLEMENT.m_axi_bvalid"
									xilinx:dependency="(spirit:decode(id(&apos;PARAM_VALUE.INTERFACES&apos;)) != &apos;S_AXI&apos;) and (spirit:decode(id(&apos;PARAM_VALUE.READ_WRITE_MODE&apos;)) != &apos;READ_ONLY&apos;)">true</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>m_axi_bready</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>wire</spirit:typeName>
							<spirit:viewNameRef>dummy_view</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:id="PORT_ENABLEMENT.m_axi_bready"
									xilinx:dependency="(spirit:decode(id(&apos;PARAM_VALUE.INTERFACES&apos;)) != &apos;S_AXI&apos;) and (spirit:decode(id(&apos;PARAM_VALUE.READ_WRITE_MODE&apos;)) != &apos;READ_ONLY&apos;)">true</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>m_axi_arid</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:vector>
						<spirit:left spirit:format="long"
								spirit:resolve="dependent"
								spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_AXI_ID_WIDTH&apos;)) - 1)">0</spirit:left>
						<spirit:right spirit:format="long">0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>wire</spirit:typeName>
							<spirit:viewNameRef>dummy_view</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:id="PORT_ENABLEMENT.m_axi_arid"
									xilinx:dependency="(spirit:decode(id(&apos;PARAM_VALUE.INTERFACES&apos;)) != &apos;S_AXI&apos;) and (spirit:decode(id(&apos;PARAM_VALUE.ID_WIDTH&apos;)) != 0) and (spirit:decode(id(&apos;PARAM_VALUE.READ_WRITE_MODE&apos;)) != &apos;WRITE_ONLY&apos;)">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>m_axi_araddr</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:vector>
						<spirit:left spirit:format="long"
								spirit:resolve="dependent"
								spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_AXI_ADDR_WIDTH&apos;)) - 1)">31</spirit:left>
						<spirit:right spirit:format="long">0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>wire</spirit:typeName>
							<spirit:viewNameRef>dummy_view</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:id="PORT_ENABLEMENT.m_axi_araddr"
									xilinx:dependency="(spirit:decode(id(&apos;PARAM_VALUE.INTERFACES&apos;)) != &apos;S_AXI&apos;) and (spirit:decode(id(&apos;PARAM_VALUE.READ_WRITE_MODE&apos;)) != &apos;WRITE_ONLY&apos;)">true</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>m_axi_arlen</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:vector>
						<spirit:left spirit:format="long">7</spirit:left>
						<spirit:right spirit:format="long">0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>wire</spirit:typeName>
							<spirit:viewNameRef>dummy_view</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:id="PORT_ENABLEMENT.m_axi_arlen"
									xilinx:dependency="(spirit:decode(id(&apos;PARAM_VALUE.INTERFACES&apos;)) != &apos;S_AXI&apos;) and (spirit:decode(id(&apos;PARAM_VALUE.READ_WRITE_MODE&apos;)) != &apos;WRITE_ONLY&apos;)">true</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>m_axi_arsize</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:vector>
						<spirit:left spirit:format="long">2</spirit:left>
						<spirit:right spirit:format="long">0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>wire</spirit:typeName>
							<spirit:viewNameRef>dummy_view</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:id="PORT_ENABLEMENT.m_axi_arsize"
									xilinx:dependency="(spirit:decode(id(&apos;PARAM_VALUE.INTERFACES&apos;)) != &apos;S_AXI&apos;) and (spirit:decode(id(&apos;PARAM_VALUE.READ_WRITE_MODE&apos;)) != &apos;WRITE_ONLY&apos;)">true</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>m_axi_arburst</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:vector>
						<spirit:left spirit:format="long">1</spirit:left>
						<spirit:right spirit:format="long">0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>wire</spirit:typeName>
							<spirit:viewNameRef>dummy_view</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:id="PORT_ENABLEMENT.m_axi_arburst"
									xilinx:dependency="(spirit:decode(id(&apos;PARAM_VALUE.INTERFACES&apos;)) != &apos;S_AXI&apos;) and (spirit:decode(id(&apos;PARAM_VALUE.READ_WRITE_MODE&apos;)) != &apos;WRITE_ONLY&apos;)">true</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>m_axi_arlock</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:vector>
						<spirit:left spirit:format="long">0</spirit:left>
						<spirit:right spirit:format="long">0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>wire</spirit:typeName>
							<spirit:viewNameRef>dummy_view</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:id="PORT_ENABLEMENT.m_axi_arlock"
									xilinx:dependency="(spirit:decode(id(&apos;PARAM_VALUE.INTERFACES&apos;)) != &apos;S_AXI&apos;) and (spirit:decode(id(&apos;PARAM_VALUE.READ_WRITE_MODE&apos;)) != &apos;WRITE_ONLY&apos;)">true</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>m_axi_arcache</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:vector>
						<spirit:left spirit:format="long">3</spirit:left>
						<spirit:right spirit:format="long">0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>wire</spirit:typeName>
							<spirit:viewNameRef>dummy_view</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:id="PORT_ENABLEMENT.m_axi_arcache"
									xilinx:dependency="(spirit:decode(id(&apos;PARAM_VALUE.INTERFACES&apos;)) != &apos;S_AXI&apos;) and (spirit:decode(id(&apos;PARAM_VALUE.READ_WRITE_MODE&apos;)) != &apos;WRITE_ONLY&apos;)">true</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>m_axi_arprot</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:vector>
						<spirit:left spirit:format="long">2</spirit:left>
						<spirit:right spirit:format="long">0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>wire</spirit:typeName>
							<spirit:viewNameRef>dummy_view</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:id="PORT_ENABLEMENT.m_axi_arprot"
									xilinx:dependency="(spirit:decode(id(&apos;PARAM_VALUE.INTERFACES&apos;)) != &apos;S_AXI&apos;) and (spirit:decode(id(&apos;PARAM_VALUE.READ_WRITE_MODE&apos;)) != &apos;WRITE_ONLY&apos;)">true</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>m_axi_arregion</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:vector>
						<spirit:left spirit:format="long">3</spirit:left>
						<spirit:right spirit:format="long">0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>wire</spirit:typeName>
							<spirit:viewNameRef>dummy_view</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:id="PORT_ENABLEMENT.m_axi_arregion"
									xilinx:dependency="(spirit:decode(id(&apos;PARAM_VALUE.INTERFACES&apos;)) != &apos;S_AXI&apos;) and (spirit:decode(id(&apos;PARAM_VALUE.READ_WRITE_MODE&apos;)) != &apos;WRITE_ONLY&apos;) and (spirit:decode(id(&apos;PARAM_VALUE.SUPPORTS_REGION&apos;)) == 1)">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>m_axi_arqos</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:vector>
						<spirit:left spirit:format="long">3</spirit:left>
						<spirit:right spirit:format="long">0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>wire</spirit:typeName>
							<spirit:viewNameRef>dummy_view</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:id="PORT_ENABLEMENT.m_axi_arqos"
									xilinx:dependency="(spirit:decode(id(&apos;PARAM_VALUE.INTERFACES&apos;)) != &apos;S_AXI&apos;) and (spirit:decode(id(&apos;PARAM_VALUE.READ_WRITE_MODE&apos;)) != &apos;WRITE_ONLY&apos;)">true</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>m_axi_aruser</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:vector>
						<spirit:left spirit:format="long"
								spirit:resolve="dependent"
								spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_AXI_ARUSER_WIDTH&apos;)) - 1)">0</spirit:left>
						<spirit:right spirit:format="long">0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>wire</spirit:typeName>
							<spirit:viewNameRef>dummy_view</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:id="PORT_ENABLEMENT.m_axi_aruser"
									xilinx:dependency="(spirit:decode(id(&apos;PARAM_VALUE.INTERFACES&apos;)) != &apos;S_AXI&apos;) and (spirit:decode(id(&apos;PARAM_VALUE.ARUSER_WIDTH&apos;)) != 0) and (spirit:decode(id(&apos;PARAM_VALUE.READ_WRITE_MODE&apos;)) != &apos;WRITE_ONLY&apos;)">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>m_axi_arvalid</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>wire</spirit:typeName>
							<spirit:viewNameRef>dummy_view</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:id="PORT_ENABLEMENT.m_axi_arvalid"
									xilinx:dependency="(spirit:decode(id(&apos;PARAM_VALUE.INTERFACES&apos;)) != &apos;S_AXI&apos;) and (spirit:decode(id(&apos;PARAM_VALUE.READ_WRITE_MODE&apos;)) != &apos;WRITE_ONLY&apos;)">true</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>m_axi_arready</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>wire</spirit:typeName>
							<spirit:viewNameRef>dummy_view</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue spirit:format="bitString"
								spirit:bitStringLength="1">0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:id="PORT_ENABLEMENT.m_axi_arready"
									xilinx:dependency="(spirit:decode(id(&apos;PARAM_VALUE.INTERFACES&apos;)) != &apos;S_AXI&apos;) and (spirit:decode(id(&apos;PARAM_VALUE.READ_WRITE_MODE&apos;)) != &apos;WRITE_ONLY&apos;)">true</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>m_axi_rid</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:vector>
						<spirit:left spirit:format="long"
								spirit:resolve="dependent"
								spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_AXI_ID_WIDTH&apos;)) - 1)">0</spirit:left>
						<spirit:right spirit:format="long">0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>wire</spirit:typeName>
							<spirit:viewNameRef>dummy_view</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue spirit:format="bitString"
								spirit:resolve="dependent"
								spirit:dependency="{(spirit:decode(id(&apos;MODELPARAM_VALUE.C_AXI_ID_WIDTH&apos;))){0}}"
								spirit:bitStringLength="4">0x0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:id="PORT_ENABLEMENT.m_axi_rid"
									xilinx:dependency="(spirit:decode(id(&apos;PARAM_VALUE.INTERFACES&apos;)) != &apos;S_AXI&apos;) and (spirit:decode(id(&apos;PARAM_VALUE.ID_WIDTH&apos;)) != 0) and (spirit:decode(id(&apos;PARAM_VALUE.READ_WRITE_MODE&apos;)) != &apos;WRITE_ONLY&apos;)">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>m_axi_rdata</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:vector>
						<spirit:left spirit:format="long"
								spirit:resolve="dependent"
								spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_AXI_DATA_WIDTH&apos;)) - 1)">31</spirit:left>
						<spirit:right spirit:format="long">0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>wire</spirit:typeName>
							<spirit:viewNameRef>dummy_view</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue spirit:format="bitString"
								spirit:resolve="dependent"
								spirit:dependency="{(spirit:decode(id(&apos;MODELPARAM_VALUE.C_AXI_DATA_WIDTH&apos;))){0}}"
								spirit:bitStringLength="32">0x00000000</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:id="PORT_ENABLEMENT.m_axi_rdata"
									xilinx:dependency="(spirit:decode(id(&apos;PARAM_VALUE.INTERFACES&apos;)) != &apos;S_AXI&apos;) and (spirit:decode(id(&apos;PARAM_VALUE.READ_WRITE_MODE&apos;)) != &apos;WRITE_ONLY&apos;)">true</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>m_axi_rresp</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:vector>
						<spirit:left spirit:format="long">1</spirit:left>
						<spirit:right spirit:format="long">0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>wire</spirit:typeName>
							<spirit:viewNameRef>dummy_view</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue spirit:format="bitString"
								spirit:bitStringLength="2">0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:id="PORT_ENABLEMENT.m_axi_rresp"
									xilinx:dependency="(spirit:decode(id(&apos;PARAM_VALUE.INTERFACES&apos;)) != &apos;S_AXI&apos;) and (spirit:decode(id(&apos;PARAM_VALUE.READ_WRITE_MODE&apos;)) != &apos;WRITE_ONLY&apos;)">true</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>m_axi_rlast</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>wire</spirit:typeName>
							<spirit:viewNameRef>dummy_view</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue spirit:format="bitString"
								spirit:bitStringLength="1">1</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:id="PORT_ENABLEMENT.m_axi_rlast"
									xilinx:dependency="(spirit:decode(id(&apos;PARAM_VALUE.INTERFACES&apos;)) != &apos;S_AXI&apos;) and (spirit:decode(id(&apos;PARAM_VALUE.READ_WRITE_MODE&apos;)) != &apos;WRITE_ONLY&apos;)">true</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>m_axi_ruser</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:vector>
						<spirit:left spirit:format="long"
								spirit:resolve="dependent"
								spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_AXI_RUSER_WIDTH&apos;)) - 1)">0</spirit:left>
						<spirit:right spirit:format="long">0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>wire</spirit:typeName>
							<spirit:viewNameRef>dummy_view</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue spirit:format="bitString"
								spirit:resolve="dependent"
								spirit:dependency="{(spirit:decode(id(&apos;MODELPARAM_VALUE.C_AXI_RUSER_WIDTH&apos;))){0}}"
								spirit:bitStringLength="1">0x0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:id="PORT_ENABLEMENT.m_axi_ruser"
									xilinx:dependency="(spirit:decode(id(&apos;PARAM_VALUE.INTERFACES&apos;)) != &apos;S_AXI&apos;) and (spirit:decode(id(&apos;PARAM_VALUE.RUSER_WIDTH&apos;)) != 0) and (spirit:decode(id(&apos;PARAM_VALUE.READ_WRITE_MODE&apos;)) != &apos;WRITE_ONLY&apos;)">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>m_axi_rvalid</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>wire</spirit:typeName>
							<spirit:viewNameRef>dummy_view</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue spirit:format="bitString"
								spirit:bitStringLength="1">0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:id="PORT_ENABLEMENT.m_axi_rvalid"
									xilinx:dependency="(spirit:decode(id(&apos;PARAM_VALUE.INTERFACES&apos;)) != &apos;S_AXI&apos;) and (spirit:decode(id(&apos;PARAM_VALUE.READ_WRITE_MODE&apos;)) != &apos;WRITE_ONLY&apos;)">true</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>m_axi_rready</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>wire</spirit:typeName>
							<spirit:viewNameRef>dummy_view</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:id="PORT_ENABLEMENT.m_axi_rready"
									xilinx:dependency="(spirit:decode(id(&apos;PARAM_VALUE.INTERFACES&apos;)) != &apos;S_AXI&apos;) and (spirit:decode(id(&apos;PARAM_VALUE.READ_WRITE_MODE&apos;)) != &apos;WRITE_ONLY&apos;)">true</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>s_axis_tvalid</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>wire</spirit:typeName>
							<spirit:viewNameRef>dummy_view</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
			</spirit:port>
			<spirit:port>
				<spirit:name>s_axis_tready</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>wire</spirit:typeName>
							<spirit:viewNameRef>dummy_view</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
			</spirit:port>
			<spirit:port>
				<spirit:name>s_axis_tdata</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:vector>
						<spirit:left spirit:format="long"
								spirit:resolve="dependent"
								spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_AXIS_TDATA_WIDTH&apos;)) - 1)">7</spirit:left>
						<spirit:right spirit:format="long">0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>wire</spirit:typeName>
							<spirit:viewNameRef>dummy_view</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
			</spirit:port>
			<spirit:port>
				<spirit:name>s_axis_tkeep</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:vector>
						<spirit:left spirit:format="long"
								spirit:resolve="dependent"
								spirit:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AXIS_TDATA_WIDTH&apos;)) / 8) - 1)">0</spirit:left>
						<spirit:right spirit:format="long">0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>wire</spirit:typeName>
							<spirit:viewNameRef>dummy_view</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
			</spirit:port>
			<spirit:port>
				<spirit:name>s_axis_tlast</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>wire</spirit:typeName>
							<spirit:viewNameRef>dummy_view</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
			</spirit:port>
			<spirit:port>
				<spirit:name>s_axis_tid</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:vector>
						<spirit:left spirit:format="long"
								spirit:resolve="dependent"
								spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_AXIS_TID_WIDTH&apos;)) - 1)">2</spirit:left>
						<spirit:right spirit:format="long">0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>wire</spirit:typeName>
							<spirit:viewNameRef>dummy_view</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
			</spirit:port>
			<spirit:port>
				<spirit:name>m_axis_tvalid</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>wire</spirit:typeName>
							<spirit:viewNameRef>dummy_view</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
			</spirit:port>
			<spirit:port>
				<spirit:name>m_axis_tready</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>wire</spirit:typeName>
							<spirit:viewNameRef>dummy_view</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
			</spirit:port>
			<spirit:port>
				<spirit:name>m_axis_tdata</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:vector>
						<spirit:left spirit:format="long"
								spirit:resolve="dependent"
								spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_AXIS_TDATA_WIDTH&apos;)) - 1)">7</spirit:left>
						<spirit:right spirit:format="long">0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>wire</spirit:typeName>
							<spirit:viewNameRef>dummy_view</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
			</spirit:port>
			<spirit:port>
				<spirit:name>m_axis_tkeep</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:vector>
						<spirit:left spirit:format="long"
								spirit:resolve="dependent"
								spirit:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AXIS_TDATA_WIDTH&apos;)) / 8) - 1)">0</spirit:left>
						<spirit:right spirit:format="long">0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>wire</spirit:typeName>
							<spirit:viewNameRef>dummy_view</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
			</spirit:port>
			<spirit:port>
				<spirit:name>m_axis_tlast</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>wire</spirit:typeName>
							<spirit:viewNameRef>dummy_view</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
			</spirit:port>
			<spirit:port>
				<spirit:name>m_axis_tid</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:vector>
						<spirit:left spirit:format="long"
								spirit:resolve="dependent"
								spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_AXIS_TID_WIDTH&apos;)) - 1)">2</spirit:left>
						<spirit:right spirit:format="long">0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>wire</spirit:typeName>
							<spirit:viewNameRef>dummy_view</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
			</spirit:port>
		</spirit:ports>
		<spirit:modelParameters>
			<spirit:modelParameter xsi:type="spirit:nameValueTypeType"
					spirit:dataType="string">
				<spirit:name>C_FAMILY</spirit:name>
				<spirit:value spirit:resolve="generated"
						spirit:id="MODELPARAM_VALUE.C_FAMILY">zynq</spirit:value>
			</spirit:modelParameter>
			<spirit:modelParameter spirit:dataType="integer">
				<spirit:name>C_AXI_ID_WIDTH</spirit:name>
				<spirit:value spirit:format="long"
						spirit:resolve="generated"
						spirit:id="MODELPARAM_VALUE.C_AXI_ID_WIDTH">1</spirit:value>
			</spirit:modelParameter>
			<spirit:modelParameter spirit:dataType="integer">
				<spirit:name>C_AXI_ADDR_WIDTH</spirit:name>
				<spirit:value spirit:format="long"
						spirit:resolve="generated"
						spirit:id="MODELPARAM_VALUE.C_AXI_ADDR_WIDTH">32</spirit:value>
			</spirit:modelParameter>
			<spirit:modelParameter spirit:dataType="integer">
				<spirit:name>C_AXI_DATA_WIDTH</spirit:name>
				<spirit:value spirit:format="long"
						spirit:resolve="generated"
						spirit:id="MODELPARAM_VALUE.C_AXI_DATA_WIDTH">32</spirit:value>
			</spirit:modelParameter>
			<spirit:modelParameter spirit:dataType="integer">
				<spirit:name>C_AXI_SUPPORTS_USER_SIGNALS</spirit:name>
				<spirit:value spirit:format="long"
						spirit:resolve="generated"
						spirit:id="MODELPARAM_VALUE.C_AXI_SUPPORTS_USER_SIGNALS">0</spirit:value>
			</spirit:modelParameter>
			<spirit:modelParameter spirit:dataType="integer">
				<spirit:name>C_AXI_SUPPORTS_REGION_SIGNALS</spirit:name>
				<spirit:value spirit:format="long"
						spirit:resolve="generated"
						spirit:id="MODELPARAM_VALUE.C_AXI_SUPPORTS_REGION_SIGNALS">0</spirit:value>
			</spirit:modelParameter>
			<spirit:modelParameter spirit:dataType="integer">
				<spirit:name>C_AXI_AWUSER_WIDTH</spirit:name>
				<spirit:value spirit:format="long"
						spirit:resolve="generated"
						spirit:id="MODELPARAM_VALUE.C_AXI_AWUSER_WIDTH">1</spirit:value>
			</spirit:modelParameter>
			<spirit:modelParameter spirit:dataType="integer">
				<spirit:name>C_AXI_ARUSER_WIDTH</spirit:name>
				<spirit:value spirit:format="long"
						spirit:resolve="generated"
						spirit:id="MODELPARAM_VALUE.C_AXI_ARUSER_WIDTH">1</spirit:value>
			</spirit:modelParameter>
			<spirit:modelParameter spirit:dataType="integer">
				<spirit:name>C_AXI_WUSER_WIDTH</spirit:name>
				<spirit:value spirit:format="long"
						spirit:resolve="generated"
						spirit:id="MODELPARAM_VALUE.C_AXI_WUSER_WIDTH">1</spirit:value>
			</spirit:modelParameter>
			<spirit:modelParameter spirit:dataType="integer">
				<spirit:name>C_AXI_RUSER_WIDTH</spirit:name>
				<spirit:value spirit:format="long"
						spirit:resolve="generated"
						spirit:id="MODELPARAM_VALUE.C_AXI_RUSER_WIDTH">1</spirit:value>
			</spirit:modelParameter>
			<spirit:modelParameter spirit:dataType="integer">
				<spirit:name>C_AXI_BUSER_WIDTH</spirit:name>
				<spirit:value spirit:format="long"
						spirit:resolve="generated"
						spirit:id="MODELPARAM_VALUE.C_AXI_BUSER_WIDTH">1</spirit:value>
			</spirit:modelParameter>
			<spirit:modelParameter spirit:dataType="integer">
				<spirit:name>C_AXIS_TDATA_WIDTH</spirit:name>
				<spirit:value spirit:format="long"
						spirit:resolve="generated"
						spirit:id="MODELPARAM_VALUE.C_AXIS_TDATA_WIDTH">8</spirit:value>
			</spirit:modelParameter>
			<spirit:modelParameter spirit:dataType="integer">
				<spirit:name>C_AXIS_TID_WIDTH</spirit:name>
				<spirit:value spirit:format="long"
						spirit:resolve="generated"
						spirit:id="MODELPARAM_VALUE.C_AXIS_TID_WIDTH">3</spirit:value>
			</spirit:modelParameter>
		</spirit:modelParameters>
	</spirit:model>
	<spirit:choices>
		<spirit:choice>
			<spirit:name>choice_list_40181835</spirit:name>
			<spirit:enumeration>32</spirit:enumeration>
			<spirit:enumeration>64</spirit:enumeration>
			<spirit:enumeration>128</spirit:enumeration>
			<spirit:enumeration>256</spirit:enumeration>
			<spirit:enumeration>512</spirit:enumeration>
			<spirit:enumeration>1024</spirit:enumeration>
		</spirit:choice>
		<spirit:choice>
			<spirit:name>choice_pairs_37189c7b</spirit:name>
			<spirit:enumeration spirit:text="No">0</spirit:enumeration>
			<spirit:enumeration spirit:text="Yes">1</spirit:enumeration>
		</spirit:choice>
		<spirit:choice>
			<spirit:name>choice_pairs_5485d92e</spirit:name>
			<spirit:enumeration spirit:text="READ ONLY">READ_ONLY</spirit:enumeration>
			<spirit:enumeration spirit:text="READ WRITE">READ_WRITE</spirit:enumeration>
			<spirit:enumeration spirit:text="WRITE ONLY">WRITE_ONLY</spirit:enumeration>
		</spirit:choice>
		<spirit:choice>
			<spirit:name>choice_pairs_c447143c</spirit:name>
			<spirit:enumeration spirit:text="Both">Both</spirit:enumeration>
			<spirit:enumeration spirit:text="M AXI">M_AXI</spirit:enumeration>
			<spirit:enumeration spirit:text="S AXI">S_AXI</spirit:enumeration>
		</spirit:choice>
	</spirit:choices>
	<spirit:description>The AXI Memory Mapped to Stream Mapper.</spirit:description>
	<spirit:parameters>
		<spirit:parameter>
			<spirit:name>INTERFACES</spirit:name>
			<spirit:displayName>Interfaces</spirit:displayName>
			<spirit:value spirit:resolve="user"
					spirit:id="PARAM_VALUE.INTERFACES"
					spirit:choiceRef="choice_pairs_c447143c"
					spirit:order="2">Both</spirit:value>
		</spirit:parameter>
		<spirit:parameter>
			<spirit:name>READ_WRITE_MODE</spirit:name>
			<spirit:displayName>READ_WRITE Mode</spirit:displayName>
			<spirit:value spirit:resolve="user"
					spirit:id="PARAM_VALUE.READ_WRITE_MODE"
					spirit:choiceRef="choice_pairs_5485d92e"
					spirit:order="3">READ_WRITE</spirit:value>
		</spirit:parameter>
		<spirit:parameter>
			<spirit:name>ADDR_WIDTH</spirit:name>
			<spirit:displayName>Address Width</spirit:displayName>
			<spirit:value spirit:format="long"
					spirit:resolve="user"
					spirit:id="PARAM_VALUE.ADDR_WIDTH"
					spirit:order="4"
					spirit:minimum="1"
					spirit:maximum="64"
					spirit:rangeType="long">32</spirit:value>
		</spirit:parameter>
		<spirit:parameter>
			<spirit:name>DATA_WIDTH</spirit:name>
			<spirit:displayName>Data Width</spirit:displayName>
			<spirit:value spirit:format="long"
					spirit:resolve="user"
					spirit:id="PARAM_VALUE.DATA_WIDTH"
					spirit:choiceRef="choice_list_40181835"
					spirit:order="5">32</spirit:value>
		</spirit:parameter>
		<spirit:parameter>
			<spirit:name>ID_WIDTH</spirit:name>
			<spirit:displayName>ID Width</spirit:displayName>
			<spirit:value spirit:format="long"
					spirit:resolve="user"
					spirit:id="PARAM_VALUE.ID_WIDTH"
					spirit:order="6"
					spirit:minimum="0"
					spirit:maximum="32"
					spirit:rangeType="long">0</spirit:value>
		</spirit:parameter>
		<spirit:parameter>
			<spirit:name>SUPPORTS_REGION</spirit:name>
			<spirit:displayName>Support Address Region Signals</spirit:displayName>
			<spirit:value spirit:format="long"
					spirit:resolve="user"
					spirit:id="PARAM_VALUE.SUPPORTS_REGION"
					spirit:choiceRef="choice_pairs_37189c7b"
					spirit:order="7">0</spirit:value>
		</spirit:parameter>
		<spirit:parameter>
			<spirit:name>AWUSER_WIDTH</spirit:name>
			<spirit:displayName>AWUSER Width</spirit:displayName>
			<spirit:value spirit:format="long"
					spirit:resolve="user"
					spirit:id="PARAM_VALUE.AWUSER_WIDTH"
					spirit:order="8"
					spirit:minimum="0"
					spirit:maximum="1024"
					spirit:rangeType="long">0</spirit:value>
		</spirit:parameter>
		<spirit:parameter>
			<spirit:name>ARUSER_WIDTH</spirit:name>
			<spirit:displayName>ARUSER Width</spirit:displayName>
			<spirit:value spirit:format="long"
					spirit:resolve="user"
					spirit:id="PARAM_VALUE.ARUSER_WIDTH"
					spirit:order="9"
					spirit:minimum="0"
					spirit:maximum="1024"
					spirit:rangeType="long">0</spirit:value>
		</spirit:parameter>
		<spirit:parameter>
			<spirit:name>RUSER_WIDTH</spirit:name>
			<spirit:displayName>RUSER Width</spirit:displayName>
			<spirit:value spirit:format="long"
					spirit:resolve="user"
					spirit:id="PARAM_VALUE.RUSER_WIDTH"
					spirit:order="10"
					spirit:minimum="0"
					spirit:maximum="1024"
					spirit:rangeType="long">0</spirit:value>
		</spirit:parameter>
		<spirit:parameter>
			<spirit:name>WUSER_WIDTH</spirit:name>
			<spirit:displayName>WUSER Width</spirit:displayName>
			<spirit:value spirit:format="long"
					spirit:resolve="user"
					spirit:id="PARAM_VALUE.WUSER_WIDTH"
					spirit:order="11"
					spirit:minimum="0"
					spirit:maximum="1024"
					spirit:rangeType="long">0</spirit:value>
		</spirit:parameter>
		<spirit:parameter>
			<spirit:name>BUSER_WIDTH</spirit:name>
			<spirit:displayName>BUSER Width</spirit:displayName>
			<spirit:value spirit:format="long"
					spirit:resolve="user"
					spirit:id="PARAM_VALUE.BUSER_WIDTH"
					spirit:order="12"
					spirit:minimum="0"
					spirit:maximum="1024"
					spirit:rangeType="long">0</spirit:value>
		</spirit:parameter>
		<spirit:parameter>
			<spirit:name>TDATA_NUM_BYTES</spirit:name>
			<spirit:displayName>TDATA Width (bytes)</spirit:displayName>
			<spirit:value spirit:format="long"
					spirit:resolve="user"
					spirit:id="PARAM_VALUE.TDATA_NUM_BYTES"
					spirit:order="13"
					spirit:minimum="1"
					spirit:maximum="512"
					spirit:rangeType="long">1</spirit:value>
		</spirit:parameter>
		<spirit:parameter>
			<spirit:name>TID_WIDTH</spirit:name>
			<spirit:displayName>TID Width (bits)</spirit:displayName>
			<spirit:value spirit:format="long"
					spirit:resolve="user"
					spirit:id="PARAM_VALUE.TID_WIDTH"
					spirit:order="14"
					spirit:minimum="3"
					spirit:maximum="3"
					spirit:rangeType="long">3</spirit:value>
		</spirit:parameter>
		<spirit:parameter>
			<spirit:name>Component_Name</spirit:name>
			<spirit:value spirit:resolve="user"
					spirit:id="PARAM_VALUE.Component_Name"
					spirit:order="1">design_1_axi_mm2s_mapper_0_0</spirit:value>
		</spirit:parameter>
	</spirit:parameters>
	<spirit:vendorExtensions>
		<xilinx:coreExtensions>
			<xilinx:displayName>AXI Memory Mapped to Stream Mapper</xilinx:displayName>
			<xilinx:coreRevision>9</xilinx:coreRevision>
		</xilinx:coreExtensions>
		<xilinx:packagingInfo>
			<xilinx:xilinxVersion>2016.3</xilinx:xilinxVersion>
			<xilinx:checksum xilinx:scope="busInterfaces"
					xilinx:value="41fd1ec8"/>
			<xilinx:checksum xilinx:scope="addressSpaces"
					xilinx:value="8ad81acb"/>
			<xilinx:checksum xilinx:scope="fileGroups"
					xilinx:value="18032f60"/>
			<xilinx:checksum xilinx:scope="ports"
					xilinx:value="6c69a83f"/>
			<xilinx:checksum xilinx:scope="hdlParameters"
					xilinx:value="206be8e3"/>
			<xilinx:checksum xilinx:scope="parameters"
					xilinx:value="3bc84741"/>
		</xilinx:packagingInfo>
	</spirit:vendorExtensions>
</spirit:component>
